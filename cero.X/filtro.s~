.equ ExampleHPFNumSections, 1
    
    
.section .xdata, xmemory, data
    
ExampleHPFCoefs:
;    coeficientes por etapa (b0,b1,a1,b2,a2)
;    etapa 1
.hword  0x275E  ; b(0)/2
.hword  0xC000  ; b(1)/2
.hword  0x9AD1  ; a(1)/2
.hword  0x275E  ; b(2)/2
.hword  0x3C7C  ; a(2)/2    
    
    
;;    etapa 1
;.hword  0x2392  ; b( 1,0)/2
;.hword  0xB8FF  ; b( 1,1)/2
;.hword  0x3D5F  ; a( 1,1)/2
;.hword  0x2392  ; b( 1,2)/2
;.hword  0xEF39  ; a( 1,2)/2
;;    etapa 2    
;.hword  0x2FBB  ; b( 2,0)/2
;.hword  0xA1F2  ; b( 2,1)/2
;.hword  0x579D  ; a( 2,1)/2
;.hword  0x2FBB  ; b( 2,2)/2
;.hword  0xDA17  ; a( 2,2)/2
;;    etapa 3
;.hword  0x3818  ; b( 3,0)/2
;.hword  0x9344  ; b( 3,1)/2
;.hword  0x68F9  ; a( 3,1)/2
;.hword  0x3818  ; b( 3,2)/2
;.hword  0xCC0D  ; a( 3,2)/2
;;    etapa 4    
;.hword  0x3C51  ; b( 4,0)/2
;.hword  0x8C80  ; b( 4,1)/2
;.hword  0x7150  ; a( 4,1)/2
;.hword  0x3C51  ; b( 4,2)/2
;.hword  0xC52E  ; a( 4,2)/2
;;    etapa 5    
;.hword  0x3E73  ; b( 5,0)/2
;.hword  0x8920  ; b( 5,1)/2
;.hword  0x7583  ; a( 5,1)/2
;.hword  0x3E73  ; b( 5,2)/2
;.hword  0xC175  ; a( 5,2)/2

; ..............................................................................
; Allocate states buffers in (uninitialized) Y data space

                .section .yconst

ExampleHPFStates1:
                .space ExampleHPFNumSections*2

ExampleHPFStates2:
                .space ExampleHPFNumSections*2

; ..............................................................................
; Allocate and intialize filter structure

                .section .data
                .global _ExampleHPFFilter

_ExampleHPFFilter:
.hword ExampleHPFNumSections-1
.hword ExampleHPFCoefs
.hword 0xFF00 ; por estar en xdata || pagina de memoria donde se guarda
.hword ExampleHPFStates1
.hword ExampleHPFStates2
.hword 0x0000

; ..............................................................................
; Sample assembly language calling program
;  The following declarations can be cut and pasted as needed into a program
;               .extern _IIRTransposeFilterInit
;               .extern _BlockIIRTransposeFilter
;               .extern _ExampleHPFFilter
;
;               .section        .bss
;
;        The input and output buffers can be made any desired size
;          the value 40 is just an example - however, one must ensure
;          that the output buffer is at least as long as the number of samples
;          to be filtered (parameter 4)
;input:         .space  40
;output:        .space  40
;               .text
;
;
;  This code can be copied and pasted as needed into a program
;
;
; Set up pointers to access input samples, filter taps, delay line and
; output samples.
;               mov     #_ExampleHPFFilter, W0  ; Initalize W0 to filter structure
;               call    _IIRTransposeFilterInit ; call this function once
;
; The next 4 instructions are required prior to each subroutine call
; to _BlockIIRTransposeFilter
;               mov     #_ExampleHPFFilter, W0  ; Initalize W0 to filter structure
;               mov     #input, W1      ; Initalize W1 to input buffer
;               mov     #output, W2     ; Initalize W2 to output buffer
;               mov     #20, W3 ; Initialize W3 with number of required output samples
;               call    _BlockIIRTransposeFilter        ; call as many times as needed



; Prueba FIR
    
    ;This file was generated by dsPIC Filter Design Software
; ..............................................................................
;    File   Notch.s
; ..............................................................................

                .equ NotchNumTaps, 31

; ..............................................................................
; Allocate and initialize filter taps

;               .section .xdata                 ;<-Syntax supported in MPLAB C30
                                                ;v1.20 and before
                .section .xdata, data, xmemory  ;<-Syntax supported in MPLAB C30
                                                ;v1.30 and later
                .align 256

NotchTaps:
;; COEFICIENTES FILTRO FIR DE AGUSTIN O.    
;.hword  0x4CCD, 0x8342, 0x4CCD
; 30 COEFICIENTES FILTRO FIR ELIMINA BANDA 
.hword	0xee75,0x14a5,0x0796,0xff9e,0xfb77
.hword	0xfa4c,0xfb6b,0xfe07,0x0135,0x03d1
.hword	0x04f2,0x0426,0x01c6,0xfeb2,0xfc2a
.hword	0x3b2b,0xfc2a,0xfeb2,0x01c6,0x0426
.hword	0x04f2,0x03d1,0x0135,0xfe07,0xfb6b
.hword	0xfa4c,0xfb77,0xff9e,0x0796,0x14a5
.hword	0xee75
;.hword	0x0002

; ..............................................................................
; Allocate delay line in (uninitialized) Y data space

;               .section .ybss,  "b"            ;<-Syntax supported in MPLAB C30
                                                ;v1.20 and before
                .section .ydata, data, ymemory  ;<-Syntax supported in MPLAB C30
                                                ;v1.30 and later
                .align 256

NotchDelay:
                .space NotchNumTaps*2

; ..............................................................................
; Allocate and intialize filter structure

                .section .data
                .global _NotchFilter

_NotchFilter:
.hword NotchNumTaps
.hword NotchTaps
.hword NotchTaps+NotchNumTaps*2-1
.hword 0xff00
.hword NotchDelay
.hword NotchDelay+NotchNumTaps*2-1
.hword NotchDelay

; ..............................................................................
; ..............................................................................
; Sample assembly language calling program
;  The following declarations can be cut and pasted as needed into a program
;               .extern _FIRFilterInit
;               .extern _BlockFIRFilter
;               .extern _NotchFilter
;
;               .section        .bss
;
;        The input and output buffers can be made any desired size
;          the value 40 is just an example - however, one must ensure
;          that the output buffer is at least as long as the number of samples
;          to be filtered (parameter 4)
;input:         .space  40
;output:        .space  40
;               .text
;
;
;  This code can be copied and pasted as needed into a program
;
;
; Set up pointers to access input samples, filter taps, delay line and
; output samples.
;               mov     #_NotchFilter, W0      ; Initalize W0 to filter structure
;               call    _FIRFilterInit  ; call this function once
;
; The next 4 instructions are required prior to each subroutine call
; to _BlockFIRFilter
;               mov     #_NotchFilter, W0      ; Initalize W0 to filter structure
;               mov     #input, W1      ; Initalize W1 to input buffer
;               mov     #output, W2     ; Initalize W2 to output buffer
;               mov     #20, W3 ; Initialize W3 with number of required output samples
;               call    _BlockFIRFilter ; call as many times as needed
